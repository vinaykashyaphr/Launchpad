;===========================================================================
;
; Copyright (C) 1999, OmniMark Technologies Corporation.
; All rights reserved.
;
; This source code is unpublished proprietary information of OmniMark
; Technologies Corporation.  The copyright notice above does not
; evidence any actual or intended publication of such source code.
;
; This file may not be redistributed as source, either by itself, 
; or as part of software derived from this file.  OmniMark programs that
; incorporate some or all of the code in this file may only be
; redistributed as "compiled virtual code" files, to be run by
; OmniMark processors such as OmniMark VM and OmniMark C/VM.
;
;===========================================================================
;  omcgi.xin - CGI programming functions
;
;  Version: 1.0
;  Created: 5 MAY 1999
;
;  Version: 1.1
;  Revised: 21 JUNE 1999
;  Change: Change in Copyright Information
;
; Version 1.2
; Revised: 3 SEPT 1999
; Change: Added INCLUDE-GUARD
;===========================================================================

include-guard omcgi.xin
include "omutil.xin"

;------
; CRLF
;------

macro CRLF is "%13#%10#" macro-end

;------------------
; DecodeQueryToken
;------------------

define stream function DecodeQueryToken value stream encoded-string as
   local stream decoded-string
   open decoded-string as buffer
   using output as decoded-string
   repeat scan encoded-string
   match ([any-text except "+%%"]+ |
          "%%" lookahead not ul [digit | "ABCDEF"] {2})+ => otherText
      output otherText
   match "%%" ul [digit | "ABCDEF"] {2} => twoHex
      output "b" % (twoHex base 16)
   match "+"+ => plusSequence
      output "%_" ||* (length of plusSequence)
   again
   close decoded-string
   return decoded-string

;-----------
; cgiGetEnv  
;-----------

define function cgiGetEnv
                      into modifiable stream env-shelf
       as
   
   local stream vars variable initial {
         "AUTH_TYPE",
         "CONTENT_LENGTH",
         "CONTENT_TYPE",
         "DOCUMENT_ROOT",
         "GATEWAY_INTERFACE",
         "HTTP_ACCEPT",
         "HTTP_ACCEPT_CHARSET",
         "HTTP_ACCEPT_LANGUAGE",
         "HTTP_CONNECTION",
         "HTTP_COOKIE",
         "HTTP_FROM",
         "HTTP_HOST",
         "HTTP_RANGE",
         "HTTP_REFERER",
         "HTTP_USER_AGENT",
         "PATH_INFO",
         "PATH_TRANSLATED",
         "QUERY_STRING",
         "REMOTE_ADDR",
         "REMOTE_HOST",
         "REMOTE_IDENT",
         "REMOTE_PORT",
         "REMOTE_USER",
         "REQUEST_METHOD",
         "REQUEST_URI",
         "SCRIPT_FILENAME",
         "SCRIPT_NAME",
         "SERVER_ADMIN",
         "SERVER_NAME",
         "SERVER_PORT",
         "SERVER_PROTOCOL",
         "SERVER_SOFTWARE"
                                      }

   clear env-shelf
   
   repeat over vars
         set new env-shelf ^ vars to UTIL_GetEnv ( vars ) when UTIL_GetEnv ( vars ) != ""
   again

;-------------
; cgiGetQuery
;-------------

define function cgiGetQuery
                          into modifiable stream query-shelf
       as

    local stream query-string initial {""}
    local stream name
   
    do scan UTIL_GetEnv ( "REQUEST_METHOD" )
    match "GET" value-end
        set query-string to UTIL_GetEnv ( "QUERY_STRING" )
    match "POST" value-end
       do scan #process-input
       match any {UTIL_GetEnv ( "CONTENT_LENGTH" )} => inputdata
          set query-string to inputdata
       done
    done
    
    clear query-shelf
    
    repeat scan query-string
    match [any-text except "=&"]+ => encoded-name "="
          [any-text except "&"]* => encoded-data "&"?
         
      set name to DecodeQueryToken encoded-name

      do when query-shelf has key name
         set query-shelf ^ name to query-shelf ^ name || "," ||
                               DecodeQueryToken encoded-data
      else
         set new query-shelf ^ name to DecodeQueryToken encoded-data
      done
    match ([any-text except "&="]* "&")+
       ; skip non-DATA=VALUE entries
    again
