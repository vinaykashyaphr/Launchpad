;===========================================================================
;
; Copyright (C) 1998 - 1999, OmniMark Technologies Corporation.
; All rights reserved.
;
; This source code is unpublished proprietary information of OmniMark
; Technologies Corporation.  The copyright notice above does not
; evidence any actual or intended publication of such source code.
;
; This file may not be redistributed as source, either by itself, 
; or as part of software derived from this file.  OmniMark programs that
; incorporate some or all of the code in this file may only be
; redistributed as "compiled virtual code" files, to be run by
; OmniMark processors such as OmniMark VM and OmniMark C/VM.
;
;===========================================================================
;  omfloat.xin  - external function definition file
;
;  Version: 1.0
;  Revised: 04 AUG 1998
;
;  Version: 1.1
;  Revised: 21 JUNE 1999
;  Change: Change in Copyright Information
;
;  Version 1.2
;  Revised: 1 JAN 2000
;  Change: Removed heralds in set actions.
;===========================================================================

include-guard omfloat.xin
declare function-library "omfloat"

declare opaque float created by "CreateFloat"

define external stream function FP_LibraryVersion
as "fp1_LibraryVersion"

define external switch function FP_CheckVersionCompatibility
   AS "fp1_CheckVersionCompatibility"

define external float function FP_add ( value float x, value float y)
   AS "fp1_add"

define external float function FP_sub ( value float x, value float y)
   AS "fp1_subtract"

define external float function FP_mul ( value float x, value float y)
   AS "fp1_multiply"

define external float function FP_div ( value float x, value float y)
   AS "fp1_divide"

define external counter function FP_comp ( value float x, value float y)
   AS "fp1_compare"

define external float function FP_v VALUE STREAM s
   AS "fp1_string2fp"

define external stream function FP_s ( value float x, value counter d optional)
   AS "fp1_fp2estring"

define external stream function FP_d ( value float x, value counter d optional)
   AS "fp1_fp2dstring"

define external float function FP_sin value float x as
   "fp1_sin"

define external float function FP_cos value float x as
   "fp1_cos"

define external float function FP_tan value float x as
   "fp1_tan"

define external float function FP_asin value float x as
   "fp1_asin"

define external float function FP_acos value float x as
   "fp1_acos"

define external float function FP_atan value float x as
   "fp1_atan"

define external float function FP_atan2 (value float x, value float y) as
   "fp1_atan2"

; sinh, cosh, tanh, asinh, acosh and atanh correspond, one-for-one to
; the C hyperbolic trig. functions described in "man sinh".

define external float function FP_sinh value float x as
   "fp1_sinh"

define external float function FP_cosh value float x as
   "fp1_cosh"

define external float function FP_tanh value float x as
   "fp1_tanh"

; exp, log, log10, and pow correspond, one-for-one to
; the C exponential and logarithm functions described in "man exp".

define external float function FP_exp value float x as
   "fp1_exp"

define external float function FP_log value float x as
   "fp1_log"

define external float function FP_log10 value float x as
   "fp1_log10"

define external float function FP_pow (value float x, value float y) as
   "fp1_pow"

; sqrt correspond, one-for-one to the C sqare root described in "man sqrt".

define external float function FP_sqrt value float x as
   "fp1_sqrt"

; isnan, fabs, fmod, remainder 
; correspond, one-for-one to the C value analysis functions described
; in "man ilogb".

define external switch function FP_isnan value float x as
   "fp1_isnan"

define external float function FP_abs value float x as
   "fp1_fabs"

define external float function FP_mod (value float x, value float y) as
   "fp1_fmod"

; hypot corresponds to the C Euclidean distance function described
; in "man hypot".

define external float function FP_hypot (value float x, value float y) as
   "fp1_hypot"

; j0, j1, jn, y0, y1 and yn correspond, one-for-one to the Bessel
; functions described in "man bessel".

define external float function FP_j0 value float x as
   "fp1_j0"

define external float function FP_j1 value float x as
   "fp1_j1"

define external float function FP_jn (value counter n, value float x) as
   "fp1_jn"

define external float function FP_y0 value float x as
   "fp1_y0"

define external float function FP_y1 value float x as
   "fp1_y1"

define external float function FP_yn (value counter n, value float x) as
   "fp1_yn"

; 
; April 30th additions logical functions
;

define external switch function FP_eq (value float x, value float y) as
   "fp1_eq"

; fplt (x, y) -- compare two floating-point values.  Return TRUE if and
; only if the first value is less than the second.

define external switch function FP_lt (value float x, value float y) as
   "fp1_lt"

; fple (x, y) -- compare two floating-point values.  Return TRUE if and
; only if the first value is less than or equal to the second.

define external switch function FP_le (value float x, value float y) as
   "fp1_le"

; fpgt (x, y) -- compare two floating-point values.  Return TRUE if and
; only if the first value is greater than the second.

define external switch function FP_gt (value float x, value float y) as
   "fp1_gt"

; fpge (x, y) -- compare two floating-point values.  Return TRUE if and
; only if the first value is greater than or equal to the second.

define external switch function FP_ge (value float x, value float y) as
   "fp1_ge"

; fpne (x, y) -- compare two floating-point values.  Return TRUE if and
; only if the first value is not equal to the second.

define external switch function FP_ne (value float x, value float y) as
   "fp1_ne"

; fpisneg x -- compare a floating-point value against.  Return TRUE if and
; only if the value is less than zero.

define external switch function FP_isneg value float x  as
   "fp1_isneg"

; fpiszero x -- compare a floating-point value against.  Return TRUE if and
; only if the value is equal to zero.

define external switch function FP_iszero value float x as
   "fp1_iszero"

; fpispos x -- compare a floating-point value against.  Return TRUE if and
; only if the value is greater than zero.

define external switch function FP_ispos value float x  as
   "fp1_ispos"

define  external float function FP_nearest( value float x, value float y optional)
as "fp1_nearest"
   
define  external float function FP_trunc( value float x, value float y optional)
as "fp1_trunc"
   
define  external float function FP_floor( value float x, value float y optional)
as "fp1_floor2"
   
define  external float function FP_ceil( value float x, value float y optional)
as "fp1_ceil2"

define  external float function FP_neg value float x 
as "fp1_neg"

; Some useful floating-point constant values:

global float FP_e
global float FP_log2e
global float FP_log10e
global float FP_ln2
global float FP_ln10
global float FP_pi
global float FP_pi2
global float FP_pi4
global float FP_1pi
global float FP_2pi
global float FP_2sqrtpi
global float FP_sqrt2
global float FP_sqrt.5
global float FP_max
global float FP_min

process-start
   set FP_e to        FP_v "2.7182818284590452354"    ; e
   set FP_log2e to    FP_v "1.4426950408889634074"    ; log2 e
   set FP_log10e to   FP_v "0.43429448190325182765"   ; log10 e
   set FP_ln2 to      FP_v "0.69314718055994530942"   ; ln 2
   set FP_ln10 to     FP_v "2.30258509299404568402"   ; ln 10
   set FP_pi to       FP_v "3.14159265358979323846"   ; pi
   set FP_pi2 to      FP_v "1.57079632679489661923"   ; pi/2
   set FP_pi4 to      FP_v "0.78539816339744830962"   ; pi/4
   set FP_1pi to      FP_v "0.31830988618379067154"   ; 1/pi
   set FP_2pi to      FP_v "0.63661977236758134308"   ; 2/pi
   set FP_2sqrtpi to  FP_v "1.12837916709551257390"   ; 2/(sqrt pi)
   set FP_sqrt2 to    FP_v "1.41421356237309504880"   ; sqrt 2
   set FP_sqrt.5 to   FP_v "0.70710678118654752440"   ; sqrt (1/2)
   set FP_max to      FP_v "1.79769313486231571e+308" ; maximum value
   set FP_min to      FP_v "4.94065645841246544e-324" ; minimum positive non-zero
